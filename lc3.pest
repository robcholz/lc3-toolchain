WHITESPACE = _{ " " | "\t" | "\n" | "\r" | "," }
Comment = @{ ";" ~ (!"\n" ~ ANY)* }

Program = { SOI ~ (Label | Statement | WHITESPACE )* ~ EOI }
Statement = _{ Instruction | Directive | Comment }

// fuck LC3
Label = @{ !((PhantomInstruction ~ WHITESPACE) | (PhantomInstruction ~ EOI)) ~ Ident ~ ":"? }
LabelReference = @{ Ident }
Register = @{ "R" ~ ('0'..'7') }
Ident = @{ ASCII_ALPHANUMERIC ~ (ASCII_ALPHANUMERIC | "_")* }

Instruction = { Add | And | Not | Ldi | Ldr | Lea | Ld | Str | Sti | St |
    Br | Jmp | Jsr | Jsrr | Ret | Halt |
    Puts | Getc | Out | In | Trap | Nop }

// prevent the parser from matching as identifier
PhantomInstruction = _{ AddInstruction | AndInstruction | NotInstruction | LdiInstruction | LdrInstruction | LeaInstruction |LdInstruction |
                        StrInstruction | StiInstruction | StInstruction | BrInstruction | JmpInstruction | JsrInstruction | JsrrInstruction |
                        RetInstruction | HaltInstruction | PutsInstruction | GetcInstruction | OutInstruction | InInstruction | TrapInstruction |
                        NopInstruction }


// Arithmetic and Logical Instructions
Add = { AddInstruction ~ Register ~ Register ~ (Register | Immediate) }
And = { AndInstruction ~ Register ~ Register ~ (Register | Immediate) }
Not = { NotInstruction ~ Register ~ Register }

// Load and Store Instructions
Ldr = { LdrInstruction ~ Register ~ Register ~ Immediate }
Ldi = { LdiInstruction ~ Register ~ LabelReference }
Lea = { LeaInstruction ~ Register ~ LabelReference }
Ld = { LdInstruction ~ Register ~ LabelReference }
Sti = { StiInstruction ~ Register ~ LabelReference }
Str = { StrInstruction ~ Register ~ Register ~ Immediate }
St = { StInstruction ~ Register ~ LabelReference }

// Branching Instructions
Br = { BrInstruction ~ LabelReference }
Jmp = { JmpInstruction ~ Register }
Jsr = { JsrInstruction ~ LabelReference }
Jsrr = { JsrrInstruction ~ Register }

// Control Instructions
Nop = { NopInstruction }
Ret = { RetInstruction }
Halt = { HaltInstruction }

// Input/Output Instructions
Puts = { PutsInstruction }
Getc = { GetcInstruction }
Out = { OutInstruction }
In = { InInstruction }

// TRAP Instructions
Trap = { TrapInstruction ~ HexAddress }

// Separate instruction keywords from AST
AddInstruction = { ^"ADD" }
AndInstruction = { ^"AND" }
NotInstruction = { ^"NOT" }
LdInstruction = { ^"LD" }
LdiInstruction = { ^"LDI" }
LdrInstruction = { ^"LDR" }
LeaInstruction = { ^"LEA" }
StInstruction = { ^"ST" }
StiInstruction = { ^"STI" }
StrInstruction = { ^"STR" }
BrInstruction = { (^"BRnzp") | (^"BRnz") | (^"BRzp") | (^"BRnp") | (^"BRn") | (^"BRz") | (^"BRp") | (^"BR") }
JmpInstruction = { ^"JMP" }
JsrInstruction = { ^"JSR" }
JsrrInstruction = { ^"JSRR" }
NopInstruction = { ^"NOP" }
RetInstruction = { ^"RET" }
HaltInstruction = { ^"HALT" }
PutsInstruction = { ^"PUTS" }
GetcInstruction = { ^"GETC" }
OutInstruction = { ^"OUT"  }
InInstruction = { ^"IN" }
TrapInstruction = { ^"TRAP" }

// Literals
HexAddress = @{ ^"x" ~ ASCII_HEX_DIGIT{1,4} }
HexValue = @{ ^"x" ~ ASCII_HEX_DIGIT+ }
DecValue = @{ "#"? ~ ("+"|"-")? ~ ASCII_DIGIT+ }
Immediate = @{ HexValue | DecValue }
StringLiteral = @{ "\"" ~ (!"\"" ~ ANY)* ~ "\"" }

// Directives
Directive = { STRINGZ | ORIG | FILL | END | BLKW }
ORIG = { OrigDirective ~ HexAddress }
FILL = { FillDirective ~ Immediate }
END = { EndDirective }
BLKW = { BlkwDirective ~ Immediate }
STRINGZ = { StringzDirective ~ StringLiteral }

// separate directive from ast
OrigDirective = {^".ORIG"}
FillDirective = {^".FILL"}
EndDirective = {^".END"}
BlkwDirective = {^".BLKW"}
StringzDirective = {^".STRINGZ"}
